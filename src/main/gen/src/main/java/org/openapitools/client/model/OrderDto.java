/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.PaymentDto;
import org.openapitools.client.model.StaffDto;
import org.openapitools.client.model.UserDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T23:20:57.815967300+05:00[Asia/Tashkent]")
public class OrderDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_COURIER = "courier";
  @SerializedName(SERIALIZED_NAME_COURIER)
  private StaffDto courier;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserDto user;

  public static final String SERIALIZED_NAME_COLLECTOR = "collector";
  @SerializedName(SERIALIZED_NAME_COLLECTOR)
  private StaffDto collector;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE_DTO = "paymentTypeDto";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE_DTO)
  private PaymentDto paymentTypeDto;

  public static final String SERIALIZED_NAME_GRADE = "grade";
  @SerializedName(SERIALIZED_NAME_GRADE)
  private Integer grade;

  public static final String SERIALIZED_NAME_PRODUCT_COUNT = "productCount";
  @SerializedName(SERIALIZED_NAME_PRODUCT_COUNT)
  private Integer productCount;

  public OrderDto() {
  }

  public OrderDto id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public OrderDto userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public OrderDto status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public OrderDto courier(StaffDto courier) {
    
    this.courier = courier;
    return this;
  }

   /**
   * Get courier
   * @return courier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StaffDto getCourier() {
    return courier;
  }


  public void setCourier(StaffDto courier) {
    this.courier = courier;
  }


  public OrderDto user(UserDto user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserDto getUser() {
    return user;
  }


  public void setUser(UserDto user) {
    this.user = user;
  }


  public OrderDto collector(StaffDto collector) {
    
    this.collector = collector;
    return this;
  }

   /**
   * Get collector
   * @return collector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StaffDto getCollector() {
    return collector;
  }


  public void setCollector(StaffDto collector) {
    this.collector = collector;
  }


  public OrderDto paymentTypeDto(PaymentDto paymentTypeDto) {
    
    this.paymentTypeDto = paymentTypeDto;
    return this;
  }

   /**
   * Get paymentTypeDto
   * @return paymentTypeDto
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentDto getPaymentTypeDto() {
    return paymentTypeDto;
  }


  public void setPaymentTypeDto(PaymentDto paymentTypeDto) {
    this.paymentTypeDto = paymentTypeDto;
  }


  public OrderDto grade(Integer grade) {
    
    this.grade = grade;
    return this;
  }

   /**
   * Get grade
   * @return grade
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getGrade() {
    return grade;
  }


  public void setGrade(Integer grade) {
    this.grade = grade;
  }


  public OrderDto productCount(Integer productCount) {
    
    this.productCount = productCount;
    return this;
  }

   /**
   * Get productCount
   * @return productCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getProductCount() {
    return productCount;
  }


  public void setProductCount(Integer productCount) {
    this.productCount = productCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDto orderDto = (OrderDto) o;
    return Objects.equals(this.id, orderDto.id) &&
        Objects.equals(this.userId, orderDto.userId) &&
        Objects.equals(this.status, orderDto.status) &&
        Objects.equals(this.courier, orderDto.courier) &&
        Objects.equals(this.user, orderDto.user) &&
        Objects.equals(this.collector, orderDto.collector) &&
        Objects.equals(this.paymentTypeDto, orderDto.paymentTypeDto) &&
        Objects.equals(this.grade, orderDto.grade) &&
        Objects.equals(this.productCount, orderDto.productCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, status, courier, user, collector, paymentTypeDto, grade, productCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    courier: ").append(toIndentedString(courier)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    collector: ").append(toIndentedString(collector)).append("\n");
    sb.append("    paymentTypeDto: ").append(toIndentedString(paymentTypeDto)).append("\n");
    sb.append("    grade: ").append(toIndentedString(grade)).append("\n");
    sb.append("    productCount: ").append(toIndentedString(productCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("status");
    openapiFields.add("courier");
    openapiFields.add("user");
    openapiFields.add("collector");
    openapiFields.add("paymentTypeDto");
    openapiFields.add("grade");
    openapiFields.add("productCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDto is not found in the empty JSON string", OrderDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `courier`
      if (jsonObj.get("courier") != null && !jsonObj.get("courier").isJsonNull()) {
        StaffDto.validateJsonObject(jsonObj.getAsJsonObject("courier"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserDto.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `collector`
      if (jsonObj.get("collector") != null && !jsonObj.get("collector").isJsonNull()) {
        StaffDto.validateJsonObject(jsonObj.getAsJsonObject("collector"));
      }
      // validate the optional field `paymentTypeDto`
      if (jsonObj.get("paymentTypeDto") != null && !jsonObj.get("paymentTypeDto").isJsonNull()) {
        PaymentDto.validateJsonObject(jsonObj.getAsJsonObject("paymentTypeDto"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDto.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDto>() {
           @Override
           public void write(JsonWriter out, OrderDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderDto
  * @throws IOException if the JSON string is invalid with respect to OrderDto
  */
  public static OrderDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDto.class);
  }

 /**
  * Convert an instance of OrderDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

