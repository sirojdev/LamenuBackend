/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T23:20:57.815967300+05:00[Asia/Tashkent]")
public class PaymentDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private Integer merchantId;

  public static final String SERIALIZED_NAME_PAYME_MERCHANT_ID = "paymeMerchantId";
  @SerializedName(SERIALIZED_NAME_PAYME_MERCHANT_ID)
  private Integer paymeMerchantId;

  public static final String SERIALIZED_NAME_PAYME_SECRET = "paymeSecret";
  @SerializedName(SERIALIZED_NAME_PAYME_SECRET)
  private String paymeSecret;

  public static final String SERIALIZED_NAME_APELSIN_MERCHANT_ID = "apelsinMerchantId";
  @SerializedName(SERIALIZED_NAME_APELSIN_MERCHANT_ID)
  private Integer apelsinMerchantId;

  public static final String SERIALIZED_NAME_APELSIN_MERCHANT_TOKEN = "apelsinMerchantToken";
  @SerializedName(SERIALIZED_NAME_APELSIN_MERCHANT_TOKEN)
  private String apelsinMerchantToken;

  public static final String SERIALIZED_NAME_CLICK_SERVICE_ID = "clickServiceId";
  @SerializedName(SERIALIZED_NAME_CLICK_SERVICE_ID)
  private Integer clickServiceId;

  public static final String SERIALIZED_NAME_CLICK_KEY = "clickKey";
  @SerializedName(SERIALIZED_NAME_CLICK_KEY)
  private String clickKey;

  public PaymentDto() {
  }

  public PaymentDto id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public PaymentDto merchantId(Integer merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(Integer merchantId) {
    this.merchantId = merchantId;
  }


  public PaymentDto paymeMerchantId(Integer paymeMerchantId) {
    
    this.paymeMerchantId = paymeMerchantId;
    return this;
  }

   /**
   * Get paymeMerchantId
   * @return paymeMerchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPaymeMerchantId() {
    return paymeMerchantId;
  }


  public void setPaymeMerchantId(Integer paymeMerchantId) {
    this.paymeMerchantId = paymeMerchantId;
  }


  public PaymentDto paymeSecret(String paymeSecret) {
    
    this.paymeSecret = paymeSecret;
    return this;
  }

   /**
   * Get paymeSecret
   * @return paymeSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymeSecret() {
    return paymeSecret;
  }


  public void setPaymeSecret(String paymeSecret) {
    this.paymeSecret = paymeSecret;
  }


  public PaymentDto apelsinMerchantId(Integer apelsinMerchantId) {
    
    this.apelsinMerchantId = apelsinMerchantId;
    return this;
  }

   /**
   * Get apelsinMerchantId
   * @return apelsinMerchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApelsinMerchantId() {
    return apelsinMerchantId;
  }


  public void setApelsinMerchantId(Integer apelsinMerchantId) {
    this.apelsinMerchantId = apelsinMerchantId;
  }


  public PaymentDto apelsinMerchantToken(String apelsinMerchantToken) {
    
    this.apelsinMerchantToken = apelsinMerchantToken;
    return this;
  }

   /**
   * Get apelsinMerchantToken
   * @return apelsinMerchantToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getApelsinMerchantToken() {
    return apelsinMerchantToken;
  }


  public void setApelsinMerchantToken(String apelsinMerchantToken) {
    this.apelsinMerchantToken = apelsinMerchantToken;
  }


  public PaymentDto clickServiceId(Integer clickServiceId) {
    
    this.clickServiceId = clickServiceId;
    return this;
  }

   /**
   * Get clickServiceId
   * @return clickServiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getClickServiceId() {
    return clickServiceId;
  }


  public void setClickServiceId(Integer clickServiceId) {
    this.clickServiceId = clickServiceId;
  }


  public PaymentDto clickKey(String clickKey) {
    
    this.clickKey = clickKey;
    return this;
  }

   /**
   * Get clickKey
   * @return clickKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClickKey() {
    return clickKey;
  }


  public void setClickKey(String clickKey) {
    this.clickKey = clickKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDto paymentDto = (PaymentDto) o;
    return Objects.equals(this.id, paymentDto.id) &&
        Objects.equals(this.merchantId, paymentDto.merchantId) &&
        Objects.equals(this.paymeMerchantId, paymentDto.paymeMerchantId) &&
        Objects.equals(this.paymeSecret, paymentDto.paymeSecret) &&
        Objects.equals(this.apelsinMerchantId, paymentDto.apelsinMerchantId) &&
        Objects.equals(this.apelsinMerchantToken, paymentDto.apelsinMerchantToken) &&
        Objects.equals(this.clickServiceId, paymentDto.clickServiceId) &&
        Objects.equals(this.clickKey, paymentDto.clickKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, merchantId, paymeMerchantId, paymeSecret, apelsinMerchantId, apelsinMerchantToken, clickServiceId, clickKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    paymeMerchantId: ").append(toIndentedString(paymeMerchantId)).append("\n");
    sb.append("    paymeSecret: ").append(toIndentedString(paymeSecret)).append("\n");
    sb.append("    apelsinMerchantId: ").append(toIndentedString(apelsinMerchantId)).append("\n");
    sb.append("    apelsinMerchantToken: ").append(toIndentedString(apelsinMerchantToken)).append("\n");
    sb.append("    clickServiceId: ").append(toIndentedString(clickServiceId)).append("\n");
    sb.append("    clickKey: ").append(toIndentedString(clickKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("merchantId");
    openapiFields.add("paymeMerchantId");
    openapiFields.add("paymeSecret");
    openapiFields.add("apelsinMerchantId");
    openapiFields.add("apelsinMerchantToken");
    openapiFields.add("clickServiceId");
    openapiFields.add("clickKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PaymentDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PaymentDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentDto is not found in the empty JSON string", PaymentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PaymentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("paymeSecret") != null && !jsonObj.get("paymeSecret").isJsonNull()) && !jsonObj.get("paymeSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymeSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymeSecret").toString()));
      }
      if ((jsonObj.get("apelsinMerchantToken") != null && !jsonObj.get("apelsinMerchantToken").isJsonNull()) && !jsonObj.get("apelsinMerchantToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apelsinMerchantToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apelsinMerchantToken").toString()));
      }
      if ((jsonObj.get("clickKey") != null && !jsonObj.get("clickKey").isJsonNull()) && !jsonObj.get("clickKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentDto>() {
           @Override
           public void write(JsonWriter out, PaymentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PaymentDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PaymentDto
  * @throws IOException if the JSON string is invalid with respect to PaymentDto
  */
  public static PaymentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentDto.class);
  }

 /**
  * Convert an instance of PaymentDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

