/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AddressDto;
import org.openapitools.client.model.CartItem;
import org.openapitools.client.model.OrderDetails;
import org.openapitools.client.model.OrderDto;
import org.openapitools.client.model.OrderLog;
import org.openapitools.client.model.OrderPriceDto;
import org.openapitools.client.model.UserDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OrderWrapper
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T23:20:57.815967300+05:00[Asia/Tashkent]")
public class OrderWrapper {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private OrderDetails details;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private OrderDto order;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressDto address;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<CartItem> products = null;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserDto user;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private OrderPriceDto price;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<OrderLog> logs = null;

  public OrderWrapper() {
  }

  public OrderWrapper details(OrderDetails details) {
    
    this.details = details;
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderDetails getDetails() {
    return details;
  }


  public void setDetails(OrderDetails details) {
    this.details = details;
  }


  public OrderWrapper order(OrderDto order) {
    
    this.order = order;
    return this;
  }

   /**
   * Get order
   * @return order
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderDto getOrder() {
    return order;
  }


  public void setOrder(OrderDto order) {
    this.order = order;
  }


  public OrderWrapper address(AddressDto address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AddressDto getAddress() {
    return address;
  }


  public void setAddress(AddressDto address) {
    this.address = address;
  }


  public OrderWrapper products(List<CartItem> products) {
    
    this.products = products;
    return this;
  }

  public OrderWrapper addProductsItem(CartItem productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * Get products
   * @return products
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CartItem> getProducts() {
    return products;
  }


  public void setProducts(List<CartItem> products) {
    this.products = products;
  }


  public OrderWrapper user(UserDto user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserDto getUser() {
    return user;
  }


  public void setUser(UserDto user) {
    this.user = user;
  }


  public OrderWrapper price(OrderPriceDto price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderPriceDto getPrice() {
    return price;
  }


  public void setPrice(OrderPriceDto price) {
    this.price = price;
  }


  public OrderWrapper logs(List<OrderLog> logs) {
    
    this.logs = logs;
    return this;
  }

  public OrderWrapper addLogsItem(OrderLog logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

   /**
   * Get logs
   * @return logs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrderLog> getLogs() {
    return logs;
  }


  public void setLogs(List<OrderLog> logs) {
    this.logs = logs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderWrapper orderWrapper = (OrderWrapper) o;
    return Objects.equals(this.details, orderWrapper.details) &&
        Objects.equals(this.order, orderWrapper.order) &&
        Objects.equals(this.address, orderWrapper.address) &&
        Objects.equals(this.products, orderWrapper.products) &&
        Objects.equals(this.user, orderWrapper.user) &&
        Objects.equals(this.price, orderWrapper.price) &&
        Objects.equals(this.logs, orderWrapper.logs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, order, address, products, user, price, logs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderWrapper {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("order");
    openapiFields.add("address");
    openapiFields.add("products");
    openapiFields.add("user");
    openapiFields.add("price");
    openapiFields.add("logs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrderWrapper
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrderWrapper.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderWrapper is not found in the empty JSON string", OrderWrapper.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrderWrapper.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderWrapper` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        OrderDetails.validateJsonObject(jsonObj.getAsJsonObject("details"));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        OrderDto.validateJsonObject(jsonObj.getAsJsonObject("order"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AddressDto.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            CartItem.validateJsonObject(jsonArrayproducts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserDto.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        OrderPriceDto.validateJsonObject(jsonObj.getAsJsonObject("price"));
      }
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
        if (jsonArraylogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
          }

          // validate the optional field `logs` (array)
          for (int i = 0; i < jsonArraylogs.size(); i++) {
            OrderLog.validateJsonObject(jsonArraylogs.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderWrapper.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderWrapper' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderWrapper> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderWrapper.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderWrapper>() {
           @Override
           public void write(JsonWriter out, OrderWrapper value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderWrapper read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrderWrapper given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrderWrapper
  * @throws IOException if the JSON string is invalid with respect to OrderWrapper
  */
  public static OrderWrapper fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderWrapper.class);
  }

 /**
  * Convert an instance of OrderWrapper to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

