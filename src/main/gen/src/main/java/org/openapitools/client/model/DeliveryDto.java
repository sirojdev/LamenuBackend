/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeliveryDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T23:20:57.815967300+05:00[Asia/Tashkent]")
public class DeliveryDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MERCHANT_ID = "merchantId";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ID)
  private Integer merchantId;

  public static final String SERIALIZED_NAME_YANDEX_CLIENT_ID = "yandexClientId";
  @SerializedName(SERIALIZED_NAME_YANDEX_CLIENT_ID)
  private Integer yandexClientId;

  public static final String SERIALIZED_NAME_YANDEX_TOKEN = "yandexToken";
  @SerializedName(SERIALIZED_NAME_YANDEX_TOKEN)
  private String yandexToken;

  public static final String SERIALIZED_NAME_EXPRESS_ID = "expressId";
  @SerializedName(SERIALIZED_NAME_EXPRESS_ID)
  private Integer expressId;

  public static final String SERIALIZED_NAME_EXPRESS_TOKEN = "expressToken";
  @SerializedName(SERIALIZED_NAME_EXPRESS_TOKEN)
  private String expressToken;

  public DeliveryDto() {
  }

  public DeliveryDto id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public DeliveryDto merchantId(Integer merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Get merchantId
   * @return merchantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMerchantId() {
    return merchantId;
  }


  public void setMerchantId(Integer merchantId) {
    this.merchantId = merchantId;
  }


  public DeliveryDto yandexClientId(Integer yandexClientId) {
    
    this.yandexClientId = yandexClientId;
    return this;
  }

   /**
   * Get yandexClientId
   * @return yandexClientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getYandexClientId() {
    return yandexClientId;
  }


  public void setYandexClientId(Integer yandexClientId) {
    this.yandexClientId = yandexClientId;
  }


  public DeliveryDto yandexToken(String yandexToken) {
    
    this.yandexToken = yandexToken;
    return this;
  }

   /**
   * Get yandexToken
   * @return yandexToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getYandexToken() {
    return yandexToken;
  }


  public void setYandexToken(String yandexToken) {
    this.yandexToken = yandexToken;
  }


  public DeliveryDto expressId(Integer expressId) {
    
    this.expressId = expressId;
    return this;
  }

   /**
   * Get expressId
   * @return expressId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpressId() {
    return expressId;
  }


  public void setExpressId(Integer expressId) {
    this.expressId = expressId;
  }


  public DeliveryDto expressToken(String expressToken) {
    
    this.expressToken = expressToken;
    return this;
  }

   /**
   * Get expressToken
   * @return expressToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getExpressToken() {
    return expressToken;
  }


  public void setExpressToken(String expressToken) {
    this.expressToken = expressToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryDto deliveryDto = (DeliveryDto) o;
    return Objects.equals(this.id, deliveryDto.id) &&
        Objects.equals(this.merchantId, deliveryDto.merchantId) &&
        Objects.equals(this.yandexClientId, deliveryDto.yandexClientId) &&
        Objects.equals(this.yandexToken, deliveryDto.yandexToken) &&
        Objects.equals(this.expressId, deliveryDto.expressId) &&
        Objects.equals(this.expressToken, deliveryDto.expressToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, merchantId, yandexClientId, yandexToken, expressId, expressToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    yandexClientId: ").append(toIndentedString(yandexClientId)).append("\n");
    sb.append("    yandexToken: ").append(toIndentedString(yandexToken)).append("\n");
    sb.append("    expressId: ").append(toIndentedString(expressId)).append("\n");
    sb.append("    expressToken: ").append(toIndentedString(expressToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("merchantId");
    openapiFields.add("yandexClientId");
    openapiFields.add("yandexToken");
    openapiFields.add("expressId");
    openapiFields.add("expressToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeliveryDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DeliveryDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryDto is not found in the empty JSON string", DeliveryDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeliveryDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("yandexToken") != null && !jsonObj.get("yandexToken").isJsonNull()) && !jsonObj.get("yandexToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yandexToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yandexToken").toString()));
      }
      if ((jsonObj.get("expressToken") != null && !jsonObj.get("expressToken").isJsonNull()) && !jsonObj.get("expressToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expressToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expressToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryDto>() {
           @Override
           public void write(JsonWriter out, DeliveryDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeliveryDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeliveryDto
  * @throws IOException if the JSON string is invalid with respect to DeliveryDto
  */
  public static DeliveryDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryDto.class);
  }

 /**
  * Convert an instance of DeliveryDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

