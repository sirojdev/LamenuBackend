/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.OrderDto;
import org.openapitools.client.model.PaymentDto;
import org.openapitools.client.model.StaffDto;
import org.openapitools.client.model.TableDto;
import org.openapitools.client.model.UserDto;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VisitDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T23:20:57.815967300+05:00[Asia/Tashkent]")
public class VisitDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserDto user;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private OrderDto orders;

  public static final String SERIALIZED_NAME_WAITER = "waiter";
  @SerializedName(SERIALIZED_NAME_WAITER)
  private StaffDto waiter;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  private TableDto table;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private PaymentDto payment;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private String price;

  public VisitDto() {
  }

  public VisitDto id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public VisitDto user(UserDto user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserDto getUser() {
    return user;
  }


  public void setUser(UserDto user) {
    this.user = user;
  }


  public VisitDto orders(OrderDto orders) {
    
    this.orders = orders;
    return this;
  }

   /**
   * Get orders
   * @return orders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrderDto getOrders() {
    return orders;
  }


  public void setOrders(OrderDto orders) {
    this.orders = orders;
  }


  public VisitDto waiter(StaffDto waiter) {
    
    this.waiter = waiter;
    return this;
  }

   /**
   * Get waiter
   * @return waiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StaffDto getWaiter() {
    return waiter;
  }


  public void setWaiter(StaffDto waiter) {
    this.waiter = waiter;
  }


  public VisitDto table(TableDto table) {
    
    this.table = table;
    return this;
  }

   /**
   * Get table
   * @return table
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TableDto getTable() {
    return table;
  }


  public void setTable(TableDto table) {
    this.table = table;
  }


  public VisitDto time(String time) {
    
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTime() {
    return time;
  }


  public void setTime(String time) {
    this.time = time;
  }


  public VisitDto status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public VisitDto payment(PaymentDto payment) {
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PaymentDto getPayment() {
    return payment;
  }


  public void setPayment(PaymentDto payment) {
    this.payment = payment;
  }


  public VisitDto price(String price) {
    
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrice() {
    return price;
  }


  public void setPrice(String price) {
    this.price = price;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisitDto visitDto = (VisitDto) o;
    return Objects.equals(this.id, visitDto.id) &&
        Objects.equals(this.user, visitDto.user) &&
        Objects.equals(this.orders, visitDto.orders) &&
        Objects.equals(this.waiter, visitDto.waiter) &&
        Objects.equals(this.table, visitDto.table) &&
        Objects.equals(this.time, visitDto.time) &&
        Objects.equals(this.status, visitDto.status) &&
        Objects.equals(this.payment, visitDto.payment) &&
        Objects.equals(this.price, visitDto.price);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, user, orders, waiter, table, time, status, payment, price);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisitDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    waiter: ").append(toIndentedString(waiter)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("user");
    openapiFields.add("orders");
    openapiFields.add("waiter");
    openapiFields.add("table");
    openapiFields.add("time");
    openapiFields.add("status");
    openapiFields.add("payment");
    openapiFields.add("price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VisitDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (VisitDto.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in VisitDto is not found in the empty JSON string", VisitDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VisitDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VisitDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserDto.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `orders`
      if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
        OrderDto.validateJsonObject(jsonObj.getAsJsonObject("orders"));
      }
      // validate the optional field `waiter`
      if (jsonObj.get("waiter") != null && !jsonObj.get("waiter").isJsonNull()) {
        StaffDto.validateJsonObject(jsonObj.getAsJsonObject("waiter"));
      }
      // validate the optional field `table`
      if (jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) {
        TableDto.validateJsonObject(jsonObj.getAsJsonObject("table"));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `payment`
      if (jsonObj.get("payment") != null && !jsonObj.get("payment").isJsonNull()) {
        PaymentDto.validateJsonObject(jsonObj.getAsJsonObject("payment"));
      }
      if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) && !jsonObj.get("price").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VisitDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VisitDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VisitDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VisitDto.class));

       return (TypeAdapter<T>) new TypeAdapter<VisitDto>() {
           @Override
           public void write(JsonWriter out, VisitDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VisitDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VisitDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VisitDto
  * @throws IOException if the JSON string is invalid with respect to VisitDto
  */
  public static VisitDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VisitDto.class);
  }

 /**
  * Convert an instance of VisitDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

