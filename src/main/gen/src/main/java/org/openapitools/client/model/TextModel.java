/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TextModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-03T23:20:57.815967300+05:00[Asia/Tashkent]")
public class TextModel {
  public static final String SERIALIZED_NAME_UZ = "uz";
  @SerializedName(SERIALIZED_NAME_UZ)
  private String uz;

  public static final String SERIALIZED_NAME_RU = "ru";
  @SerializedName(SERIALIZED_NAME_RU)
  private String ru;

  public static final String SERIALIZED_NAME_ENG = "eng";
  @SerializedName(SERIALIZED_NAME_ENG)
  private String eng;

  public TextModel() {
  }

  public TextModel uz(String uz) {
    
    this.uz = uz;
    return this;
  }

   /**
   * Get uz
   * @return uz
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUz() {
    return uz;
  }


  public void setUz(String uz) {
    this.uz = uz;
  }


  public TextModel ru(String ru) {
    
    this.ru = ru;
    return this;
  }

   /**
   * Get ru
   * @return ru
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRu() {
    return ru;
  }


  public void setRu(String ru) {
    this.ru = ru;
  }


  public TextModel eng(String eng) {
    
    this.eng = eng;
    return this;
  }

   /**
   * Get eng
   * @return eng
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEng() {
    return eng;
  }


  public void setEng(String eng) {
    this.eng = eng;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextModel textModel = (TextModel) o;
    return Objects.equals(this.uz, textModel.uz) &&
        Objects.equals(this.ru, textModel.ru) &&
        Objects.equals(this.eng, textModel.eng);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uz, ru, eng);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextModel {\n");
    sb.append("    uz: ").append(toIndentedString(uz)).append("\n");
    sb.append("    ru: ").append(toIndentedString(ru)).append("\n");
    sb.append("    eng: ").append(toIndentedString(eng)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uz");
    openapiFields.add("ru");
    openapiFields.add("eng");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TextModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TextModel.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextModel is not found in the empty JSON string", TextModel.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TextModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextModel` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uz") != null && !jsonObj.get("uz").isJsonNull()) && !jsonObj.get("uz").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uz` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uz").toString()));
      }
      if ((jsonObj.get("ru") != null && !jsonObj.get("ru").isJsonNull()) && !jsonObj.get("ru").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ru` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ru").toString()));
      }
      if ((jsonObj.get("eng") != null && !jsonObj.get("eng").isJsonNull()) && !jsonObj.get("eng").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eng` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eng").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextModel.class));

       return (TypeAdapter<T>) new TypeAdapter<TextModel>() {
           @Override
           public void write(JsonWriter out, TextModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TextModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TextModel
  * @throws IOException if the JSON string is invalid with respect to TextModel
  */
  public static TextModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextModel.class);
  }

 /**
  * Convert an instance of TextModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

