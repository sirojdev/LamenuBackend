/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CategoryDto;
import org.openapitools.client.model.ExtraDto;
import org.openapitools.client.model.LabelDto;
import org.openapitools.client.model.OptionDto;
import org.openapitools.client.model.ProductDto;
import org.openapitools.client.model.ProductInfoDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsMenusApi
 */
@Disabled
public class SettingsMenusApiTest {

    private final SettingsMenusApi api = new SettingsMenusApi();

    /**
     * Returns a list of all categories
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsCategoriesGetTest() throws ApiException {
        List<CategoryDto> response = api.merchantSettingsCategoriesGet();
        // TODO: test validations
    }

    /**
     * Deletes a category by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsCategoryIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantSettingsCategoryIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a category by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsCategoryIdGetTest() throws ApiException {
        Long id = null;
        CategoryDto response = api.merchantSettingsCategoryIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsCategoryPostTest() throws ApiException {
        CategoryDto categoryDto = null;
        api.merchantSettingsCategoryPost(categoryDto);
        // TODO: test validations
    }

    /**
     * Adds a new category
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsCategoryPutTest() throws ApiException {
        CategoryDto categoryDto = null;
        api.merchantSettingsCategoryPut(categoryDto);
        // TODO: test validations
    }

    /**
     * Deletes a extra by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsExtraIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantSettingsExtraIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a extra by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsExtraIdGetTest() throws ApiException {
        Long id = null;
        ExtraDto response = api.merchantSettingsExtraIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new extra
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsExtraPostTest() throws ApiException {
        ExtraDto extraDto = null;
        api.merchantSettingsExtraPost(extraDto);
        // TODO: test validations
    }

    /**
     * Adds a new extra
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsExtraPutTest() throws ApiException {
        ExtraDto extraDto = null;
        api.merchantSettingsExtraPut(extraDto);
        // TODO: test validations
    }

    /**
     * Returns a list of all extras
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsExtrasGetTest() throws ApiException {
        List<ExtraDto> response = api.merchantSettingsExtrasGet();
        // TODO: test validations
    }

    /**
     * Deletes a lable by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsLabelIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantSettingsLabelIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a lable by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsLabelIdGetTest() throws ApiException {
        Long id = null;
        LabelDto response = api.merchantSettingsLabelIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new lable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsLabelPostTest() throws ApiException {
        LabelDto labelDto = null;
        api.merchantSettingsLabelPost(labelDto);
        // TODO: test validations
    }

    /**
     * Adds a new lable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsLabelPutTest() throws ApiException {
        LabelDto labelDto = null;
        api.merchantSettingsLabelPut(labelDto);
        // TODO: test validations
    }

    /**
     * Returns a list of all lables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsLabelsGetTest() throws ApiException {
        List<LabelDto> response = api.merchantSettingsLabelsGet();
        // TODO: test validations
    }

    /**
     * Returns a list of all option
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsOptionGetTest() throws ApiException {
        List<OptionDto> response = api.merchantSettingsOptionGet();
        // TODO: test validations
    }

    /**
     * Deletes a option by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsOptionIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantSettingsOptionIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a option by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsOptionIdGetTest() throws ApiException {
        Long id = null;
        OptionDto response = api.merchantSettingsOptionIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new option
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsOptionPostTest() throws ApiException {
        OptionDto optionDto = null;
        api.merchantSettingsOptionPost(optionDto);
        // TODO: test validations
    }

    /**
     * Adds a new option
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsOptionPutTest() throws ApiException {
        OptionDto optionDto = null;
        api.merchantSettingsOptionPut(optionDto);
        // TODO: test validations
    }

    /**
     * Deletes a product by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsProductIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantSettingsProductIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a product by its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsProductIdGetTest() throws ApiException {
        Long id = null;
        ProductDto response = api.merchantSettingsProductIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsProductPostTest() throws ApiException {
        ProductInfoDto productInfoDto = null;
        api.merchantSettingsProductPost(productInfoDto);
        // TODO: test validations
    }

    /**
     * Adds a new product
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsProductPutTest() throws ApiException {
        ProductInfoDto productInfoDto = null;
        api.merchantSettingsProductPut(productInfoDto);
        // TODO: test validations
    }

    /**
     * Returns a list of all products
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantSettingsProductsGetTest() throws ApiException {
        List<ProductDto> response = api.merchantSettingsProductsGet();
        // TODO: test validations
    }

}
