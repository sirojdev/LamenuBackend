/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BookDto;
import org.openapitools.client.model.VisitDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DineInApi
 */
@Disabled
public class DineInApiTest {

    private final DineInApi api = new DineInApi();

    /**
     * Deletes a booking by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantBookIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantBookIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a book by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantBookIdGetTest() throws ApiException {
        Long id = null;
        BookDto response = api.merchantBookIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new booking
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantBookPostTest() throws ApiException {
        BookDto bookDto = null;
        api.merchantBookPost(bookDto);
        // TODO: test validations
    }

    /**
     * Update a booking&#39;s information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantBookPutTest() throws ApiException {
        BookDto bookDto = null;
        api.merchantBookPut(bookDto);
        // TODO: test validations
    }

    /**
     * Returns a list of all books
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantBooksGetTest() throws ApiException {
        List<BookDto> response = api.merchantBooksGet();
        // TODO: test validations
    }

    /**
     * Deletes a visit by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantVisitIdDeleteTest() throws ApiException {
        Long id = null;
        api.merchantVisitIdDelete(id);
        // TODO: test validations
    }

    /**
     * Returns a visit by its id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantVisitIdGetTest() throws ApiException {
        Long id = null;
        VisitDto response = api.merchantVisitIdGet(id);
        // TODO: test validations
    }

    /**
     * Adds a new visit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantVisitPostTest() throws ApiException {
        VisitDto visitDto = null;
        api.merchantVisitPost(visitDto);
        // TODO: test validations
    }

    /**
     * Update a visit&#39;s information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantVisitPutTest() throws ApiException {
        VisitDto visitDto = null;
        api.merchantVisitPut(visitDto);
        // TODO: test validations
    }

    /**
     * Returns a list of all visits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void merchantVisitsGetTest() throws ApiException {
        List<VisitDto> response = api.merchantVisitsGet();
        // TODO: test validations
    }

}
