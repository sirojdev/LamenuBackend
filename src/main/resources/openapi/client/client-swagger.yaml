openapi: "3.0.3"
info:
  title: "Lamenu documentation Client"
  description: "Lamenu documentation Clint allows to you view the schema of Client Lamenu project"
  version: "1.0.0"
servers:
  - url: 'http://127.0.0.1:9000/v1/'
    description: 'Local server'
  - url: 'http://188.166.167.80:9000/v1/'
    description: "Host server"
  - url: 'https://api.lamenu.uz/v1/'
    description: "Domain server"


tags:
  - name: Device
    description: Endpoints related to device

  - name: Auth
    description: Endpoints related to client authentication

  - name: Menus
    description: Endpoints related to menu

  - name: Profile
    description: Endpoints related to profile

  - name: Favourite
    description: Endpoints related to favourite

  - name: Order
    description: Endpoints related to order

  - name: Address
    description: Endpoints related to address

paths:

  /device:
    post:
      tags:
        - Auth
      description: "Get device token"
      requestBody:
        description: "A JSON object receive device token"
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                  merchantId:
                    type: "integer"
                    format: "long"
                  uuid:
                    type: string
                  brand:
                    type: string
                  build:
                    type: string
                  model:
                    type: string
                  phone:
                    type: string
                  osVersion:
                    type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeviceModel"
        "204":
          description: "No Content"

  /client/device/terminate:
    post:
      tags:
        - Device
      description: "Terminate device by id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"

  /client/device/terminate/others:
    post:
      tags:
        - Device
      description: "Terminate other devices"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"

  /client/auth/send-sms:
    post:
      tags:
        - Auth
      description: "Auth client sms"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object receive client's phone"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: "string"
                hash:
                  type: string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DeviceModel"
        "204":
          description: "No Content"

  /client/auth/verify:
    post:
      tags:
        - Auth
      description: "Auth client verify"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object receive sms code"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DeviceModel"
        "204":
          description: "No Content"

  /client/auth/sign-up:
    post:
      tags:
        - Auth
      description: "Auth client sign up"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object receive with sign up"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: "string"
                lastName:
                  type: "string"
                image:
                  type: "string"
                birthDay:
                  type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/DeviceModel"
        "204":
          description: "No Content"

  /client/menu:
    get:
      tags:
        - Menus
      description: "Returns a list of all menus"
      parameters:
        - name: "appKey"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MenuDto"
        "204":
          description: "No Content"

  /client/profile:
    get:
      tags:
        - Profile
      description: "Returns profile by its ID"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    put:
      tags:
        - Profile
      description: "Update client profile"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated profile's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: "OK"

  /client/profile/logout:
    post:
      tags:
        - Profile
      description: "Profile logout"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"

  /client/profile/delete:
    post:
      tags:
        - Profile
      description: "Profile delete"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"

  /client/profile/firebase:
    put:
      tags:
        - Profile
      description: "Update client profile firebase"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated profile's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceModel"
      responses:
        "200":
          description: "OK"

  /client/favourite:
    post:
      tags:
        - Favourite
      description: "Adds a new favourite"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing favourite's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavouriteDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Favourite
      description: "Update a favourite's information"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated favourite's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavouriteDto"
      responses:
        "200":
          description: "OK"
    get:
      tags:
        - Favourite
      description: "Returns a list of all favourites"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FavouriteDto"
        "204":
          description: "No Content"
    delete:
      tags:
        - Favourite
      description: "Deletes a favourite by its id"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
  /client/favourite/{id}:
    delete:
      tags:
        - Favourite
      description: "Deletes a favourite by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /client/books:
    get:
      tags:
        - DineIn
      description: "Returns a list of all books"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BookDto"
        "204":
          description: "No Content"
  /client/book:
    post:
      tags:
        - DineIn
      description: "Adds a new booking"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing booking's information"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: "long"
                table:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: "long"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - DineIn
      description: "Update a booking's information"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated booking's information"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: "long"
                client:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: "long"
                table:
                  type: object
                  properties:
                    id:
                      type: integer
                      format: "long"
      responses:
        "200":
          description: "OK"
  /client/book/{id}:
    get:
      tags:
        - DineIn
      description: "Returns a book by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - DineIn
      description: "Deletes a booking by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /client/orders:
    get:
      tags:
        - Order
      description: "Returns a list of all orders"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OrderDto"
        "204":
          description: "No Content"
  /client/order:
    post:
      tags:
        - Order
      description: "Adds a new ordering"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing ordering's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderDto"
      responses:
        "200":
          description: "OK"

  /client/order/{id}:
    delete:
      tags:
        - Order
      description: "Deletes a ordering by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"
  /client/orders/{id}:
    get:
      tags:
        - Order
      description: "Returns a book by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"

  /client/address:
    get:
      tags:
        - Address
      description: "Returns a list of client addresses"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AddressDto"
        "204":
          description: "No Content"

    post:
      tags:
        - Address
      description: "Add a address's information"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing add address's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressDto"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"

    put:
      tags:
        - Address
      description: "Update a address's information"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated address's information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressDto"
      responses:
        "200":
          description: "OK"
  /client/address/{id}:
    get:
      tags:
        - Address
      description: "Returns an address by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AddressDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Address
      description: "Deletes an address by its id"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"




#//==================================================================================================SCHEMAS
components:
  schemas:

    MenuDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"

    UserDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        merchantId:
          type: "integer"
          format: "long"
        badge:
          $ref: '#/components/schemas/BadgeDto'
        phone:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        image:
          type: "string"
        birthDay:
          type: "string"
        token:
          type: "string"

    BadgeDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        merchantId:
          type: "integer"
          format: "long"
        name:
          $ref: '#/components/schemas/TextModel'
        textColor:
          type: "string"
        bgColor:
          type: string
        icon:
          type: string

    TextModel:
      type: "object"
      properties:
        uz:
          type: "string"
        ru:
          type: "string"
        eng:
          type: "string"

    DeviceModel:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        uuid:
          type: "string"
        osVersion:
          type: "string"
        model:
          type: "string"
        brand:
          type: "string"
        build:
          type: "string"
        firebaseToken:
          type: "string"
        ip:
          type: "string"
        token:
          type: "string"
        blockedUntil:
          type: "string"
          format: "date-time"
        code:
          type: "string"
        action:
          type: "string"
        expAction:
          type: "boolean"
        phone:
          type: "string"

    BookDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        clientId:
          type: "integer"
          format: "long"
        tableId:
          type: "integer"
          format: "long"
        time:
          type: string
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        comment:
          type: string

    FavouriteDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        clientId:
          type: "integer"
          format: "long"
        deviceId:
          type: "integer"
          format: "long"
        product:
          $ref: '#/components/schemas/ProductDto'

    ProductDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        merchantId:
          type: "integer"
          format: "long"
        name:
          $ref: '#/components/schemas/TextModel'
        description:
          $ref: '#/components/schemas/TextModel'
        image:
          type: string
        costPrice:
          type: "integer"
          format: "long"
        active:
          type: boolean
        categoryId:
          type: "integer"
          format: "long"
        category:
          $ref: '#/components/schemas/CategoryDto'
        timeCookingMin:
          type: "integer"
          format: "long"
        timeCookingMax:
          type: "integer"
          format: "long"
        deliveryEnabled:
          type: boolean
        count:
          type: "integer"
          format: "long"


    OrderDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        type:
          $ref: "#/components/schemas/OrderType"
        status:
          type: "string"
        createdAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        updatedAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        deliveredAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        deliveryAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        totalPrice:
          type: "number"
          format: "double"
        totalDiscount:
          type: "number"
          format: "double"
        comment:
          type: "string"

    OrderType:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          type: "string"

    AddressDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        type:
          type: "string"
        status:
          type: "string"
        details:
          $ref: "#/components/schemas/AddressDetails"
        description:
          type: "string"
        latitude:
          type: "integer"
          format: "double"
        longitude:
          type: "integer"
          format: "double"

    AddressType:
      type: "object"
      properties:
        name:
          type: "string"

    AddressDetails:
      type: "object"
      properties:
        building:
          type: "string"
        entrance:
          type: "string"
        code:
          type: "string"
        floor:
          type: integer
        comment:
          type: "string"

    CategoryDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"
        merchantId:
          type: "integer"
          format: "long"
        bgColor:
          type: "string"
        textColor:
          type: "string"




  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
