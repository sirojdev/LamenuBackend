openapi: "3.0.3"
info:
  title: "Lamenu documentation for Users"
  description: "Lamenu documentation allows to you view the schema of Lamenu project"
  version: "1.0.0"
servers:
  - url: 'http://0.0.0.0:8181/api/v1/'
  - url: 'http://188.166.167.80:8181/api/v1/'

tags:
  - name: Auth
    description: Login endpoints

  - name: Users
    description: Endpoints related to user

  - name: Branches
    description: Endpoints related to branch

  - name: Categories
    description: Endpoints related to category

  - name: Extras
    description: Endpoints related to extra

  - name: Labels
    description: Endpoints related to label

  - name: Menus
    description: Endpoints related to menu

  - name: Options
    description: Endpoints related to option

  - name: Products
    description: Endpoints related to product

  - name: Restaurants
    description: Endpoints related to restaurant

paths:

  /login:
    post:
      tags:
        - Auth
      description: "Via this endpoint you can get login token and sending verification code to phone"
      requestBody:
        description: "This object must contain only deviceUuid:unique and phone"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: '#/components/schemas/LoginResponse'

  /verify:
    post:
      tags:
        - Auth
      description: "Via this endpoint you can get access and refresh tokens 
      if this user exist else token for registration"
      security:
        - bearerAuth: []
      requestBody:
        description: "This object must contain only verification code"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: '#/components/schemas/LoginResponse'
  /reg:
    post:
      tags:
        - Auth
      description: "Via this endpoint you can get access and refresh tokens after registration"
      security:
        - bearerAuth: []
      requestBody:
        description: "A JSON object containing user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: '#/components/schemas/LoginResponse'



  /users:
    get:
      tags:
        - Users
      description: "Returns a list of all users"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/UserDto'
        "204":
          description: "No content"

  /user:
    post:
      tags:
        - Users
      description: "Creates a new user"
      requestBody:
        description: "A JSON object containing user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Users
      description: "Updates an existing user"
      requestBody:
        description: "A JSON object containing updated user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: "OK"

  /user/{id}:
    get:
      tags:
        - Users
      description: "Returns a user by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "204":
          description: "No content"
        "400":
          description: "Bad request"
    delete:
      tags:
        - Users
      description: "Deletes a user by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"

  /branches:
    get:
      tags:
        - Branches
      description: "Returns a list of all branches"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BranchDto"
        "204":
          description: "No Content"
  /branch:
    post:
      tags:
        - Branches
      description: "Adds a new branch"
      requestBody:
        description: "A JSON object containing updated branch information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Branches
      description: "Updates an existing branch"
      requestBody:
        description: "A JSON object containing updated branch information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BranchDto"
      responses:
        "200":
          description: "OK"
  /branch/{id}:
    get:
      tags:
        - Branches
      description: "Returns a branch by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Branches
      description: "Deletes a branch by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /categories:
    get:
      tags:
        - Categories
      description: "Returns a list of all catecories"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDto"
        "204":
          description: "No Content"
  /category:
    post:
      tags:
        - Categories
      description: "Adds a new category"
      requestBody:
        description: "A JSON object containing updated category information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Categories
      description: "Adds a new category"
      requestBody:
        description: "A JSON object containing updated category information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryDto"
      responses:
        "200":
          description: "OK"
  /category/{id}:
    get:
      tags:
        - Categories
      description: "Returns a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Categories
      description: "Deletes a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /extras:
    get:
      tags:
        - Extras
      description: "Returns a list of all extras"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraDto"
        "204":
          description: "No Content"
  /extra:
    post:
      tags:
        - Extras
      description: "Adds a new extra"
      requestBody:
        description: "A JSON object containing updated extra information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtraDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Extras
      description: "Adds a new extra"
      requestBody:
        description: "A JSON object containing updated extra information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtraDto"
      responses:
        "200":
          description: "OK"
  /extra/{id}:
    get:
      tags:
        - Extras
      description: "Returns a extra by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtraDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Extras
      description: "Deletes a extra by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /lables:
    get:
      tags:
        - Labels
      description: "Returns a list of all lables"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LabelDto"
        "204":
          description: "No Content"
  /lable:
    post:
      tags:
        - Labels
      description: "Adds a new lable"
      requestBody:
        description: "A JSON object containing updated lable information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Labels
      description: "Adds a new lable"
      requestBody:
        description: "A JSON object containing updated lable information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelDto"
      responses:
        "200":
          description: "OK"
  /lable/{id}:
    get:
      tags:
        - Labels
      description: "Returns a lable by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Labels
      description: "Deletes a lable by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /menus:
    get:
      tags:
        - Menus
      description: "Returns a list of all menus"
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MenuDto"
        "204":
          description: "No Content"
  /menu:
    post:
      tags:
        - Menus
      description: "Adds a new menu"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated menu information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Menus
      description: "Adds a new menu"
      security:
        - bearerAuth: [ ]
      requestBody:
        description: "A JSON object containing updated menu information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuDto"
      responses:
        "200":
          description: "OK"
  /menu/{id}:
    get:
      tags:
        - Menus
      description: "Returns a menu by its ID"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Menus
      description: "Deletes a menu by its ID"
      security:
        - bearerAuth: [ ]
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /options:
    get:
      tags:
        - Options
      description: "Returns a list of all option"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OptionDto"
        "204":
          description: "No Content"
  /option:
    post:
      tags:
        - Options
      description: "Adds a new option"
      requestBody:
        description: "A JSON object containing updated option information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OptionDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Options
      description: "Adds a new option"
      requestBody:
        description: "A JSON object containing updated option information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OptionDto"
      responses:
        "200":
          description: "OK"
  /option/{id}:
    get:
      tags:
        - Options
      description: "Returns a option by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Options
      description: "Deletes a option by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /products:
    get:
      tags:
        - Products
      description: "Returns a list of all products"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductDto"
        "204":
          description: "No Content"
  /product:
    post:
      tags:
        - Products
      description: "Adds a new product"
      requestBody:
        description: "A JSON object containing updated product information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDto"
      responses:
        "200":
          description: "OK"
    put:
      tags:
        - Products
      description: "Adds a new product"
      requestBody:
        description: "A JSON object containing updated product information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDto"
      responses:
        "200":
          description: "OK"
  /product/{id}:
    get:
      tags:
        - Products
      description: "Returns a product by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Products
      description: "Deletes a product by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /restaurants:
    get:
      tags:
        - Restaurants
      description: "Returns a list of all Restaurants"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RestaurantDto"
        "204":
          description: "No Content"
  /restaurant:
    post:
      tags:
        - Restaurants
      description: "Adds a new restaurant"
      requestBody:
        description: "A JSON object containing updated product information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantDto"
      responses:
        "200":
          description: "OK"

    put:
      tags:
        - Restaurants
      description: "Update the restaurant"
      requestBody:
        description: "A JSON object containing updated product information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestaurantDto"
      responses:
        "200":
          description: "OK"

  /restaurant/{id}:
    get:
      tags:
        - Restaurants
      description: "Returns a restaurant by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      tags:
        - Restaurants
      description: "Deletes a restaurant by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"


components:
  schemas:

    UserDto:
      type: "object"
      properties:
        id:
          type: integer
          format: "long"
        phone:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        image:
          type: "string"
        birthDay:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
    BranchDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        longitude:
          type: "number"
        latitude:
          type: "number"
        address:
          type: "string"
    CategoryDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"
    OrderDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        type:
          $ref: "#/components/schemas/OrderType"
        status:
          type: "string"
        createdAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        updatedAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        deliveredAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        deliveryAt:
          type: "string"
          format: "yyyy-MM-dd hh:mm:ss.SSSSSS"
        totalPrice:
          type: "number"
          format: "double"
        totalDiscount:
          type: "number"
          format: "double"
        comment:
          type: "string"

    OrderType:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          type: "string"

    ExtraDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        price:
          type: "integer"
          format: "double"
        description:
          $ref: "#/components/schemas/TextModel"

    LabelDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        menuId:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        textColor:
          type: "string"
        bgColor:
          type: "string"
        icon:
          type: "string"

    MenuDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"

    OptionDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        description:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"
        price:
          type: "integer"
          format: "double"

    ProductDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        menuId:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        description:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"
        costPrice:
          type: "integer"
          format: "double"

    LoginRequest:
      type: "object"
      properties:
        deviceUuid:
          type: "string"
        phone:
          type: "string"
        code:
          type: "integer"
          format: "long"
    LoginResponse:
      type: "object"
      properties:
        loginToken:
          type: "string"
        accessToken:
          type: "string"
        refreshToken:
          type: "string"
        regToken:
          type: "string"

    RestaurantDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        logo:
          type: "string"
        domain:
          type: "string"


    TextModel:
      type: "object"
      properties:
        uz:
          type: "string"
        ru:
          type: "string"
        en:
          type: "string"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
