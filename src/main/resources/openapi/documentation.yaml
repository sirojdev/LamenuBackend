openapi: "3.0.3"
info:
  title: "Lamenu documentation"
  description: "Lamenu documentation allows to you view the schema of Lamenu project"
  version: "1.0.0"
servers:
  - url: 'http://0.0.0.0:8181/api/v1/'
  - url: 'http://188.166.167.80:8181/api/v1/'
paths:
  /users:
    get:
      description: "Returns a list of all users"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/UserDto'
        "204":
          description: "No content"

  /user:
    post:
      description: "Creates a new user"
      requestBody:
        description: "A JSON object containing user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing user"
      requestBody:
        description: "A JSON object containing updated user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: "OK"

  /user/{id}:
    get:
      description: "Returns a user by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "204":
          description: "No content"
        "400":
          description: "Bad request"
    delete:
      description: "Deletes a user by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad request"

  /branches:
    get:
      description: "Returns a list of all branches"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BranchDto"
        "204":
          description: "No Content"
  /branch:
    post:
      description: "Adds a new branch"
      requestBody:
        $ref: "#/components/schemas/BranchDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing branch"
      requestBody:
        $ref: "#/components/schemas/BranchDto"
      responses:
        "200":
          description: "OK"
  /branch/{id}:
    get:
      description: "Returns a branch by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BranchDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a branch by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /categories:
    get:
      description: "Returns a list of all catecories"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryDto"
        "204":
          description: "No Content"
  /category:
    post:
      description: "Adds a new category"
      requestBody:
        $ref: "#/components/schemas/CategoryDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing category"
      requestBody:
        $ref: "#/components/schemas/CategoryDto"
      responses:
        "200":
          description: "OK"
  /category/{id}:
    get:
      description: "Returns a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a category by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /extras:
    get:
      description: "Returns a list of all extras"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExtraDto"
        "204":
          description: "No Content"
  /extra:
    post:
      description: "Adds a new extra"
      requestBody:
        $ref: "#/components/schemas/ExtraDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing extra"
      requestBody:
        $ref: "#/components/schemas/ExtraDto"
      responses:
        "200":
          description: "OK"
  /extra/{id}:
    get:
      description: "Returns a extra by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtraDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a extra by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /lables:
    get:
      description: "Returns a list of all lables"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LabelDto"
        "204":
          description: "No Content"
  /lable:
    post:
      description: "Adds a new lable"
      requestBody:
        $ref: "#/components/schemas/LabelDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing lable"
      requestBody:
        $ref: "#/components/schemas/LabelDto"
      responses:
        "200":
          description: "OK"
  /lable/{id}:
    get:
      description: "Returns a lable by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a lable by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /menus:
    get:
      description: "Returns a list of all menus"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MenuDto"
        "204":
          description: "No Content"
  /menu:
    post:
      description: "Adds a new menu"
      requestBody:
        $ref: "#/components/schemas/MenuDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing menu"
      requestBody:
        $ref: "#/components/schemas/MenuDto"
      responses:
        "200":
          description: "OK"
  /menu/{id}:
    get:
      description: "Returns a menu by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a menu by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /options:
    get:
      description: "Returns a list of all option"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/OptionDto"
        "204":
          description: "No Content"
  /option:
    post:
      description: "Adds a new option"
      requestBody:
        $ref: "#/components/schemas/OptionDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing option"
      requestBody:
        $ref: "#/components/schemas/OptionDto"
      responses:
        "200":
          description: "OK"
  /option/{id}:
    get:
      description: "Returns a option by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a option by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

  /products:
    get:
      description: "Returns a list of all products"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ProductDto"
        "204":
          description: "No Content"
  /product:
    post:
      description: "Adds a new product"
      requestBody:
        $ref: "#/components/schemas/ProductDto"
      responses:
        "200":
          description: "OK"
    put:
      description: "Updates an existing product"
      requestBody:
        $ref: "#/components/schemas/ProductDto"
      responses:
        "200":
          description: "OK"
  /product/{id}:
    get:
      description: "Returns a product by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDto"
        "204":
          description: "No Content"
        "400":
          description: "Bad Request"
    delete:
      description: "Deletes a product by its ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "Bad Request"

components:
  schemas:
    UserDto:
      type: "object"
      properties:
        id:
          type: integer
          format: "long"
        phone:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        image:
          type: "string"
        birthDay:
          type: "string"
    BranchDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        longitude:
          type: "number"
        latitude:
          type: "number"
        address:
          type: "string"
    CategoryDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"

    ExtraDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        price:
          type: "integer"
          format: "double"
        description:
          $ref: "#/components/schemas/TextModel"

    LabelDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        menuId:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        textColor:
          type: "string"
        bgColor:
          type: "string"
        icon:
          type: "string"

    MenuDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"

    OptionDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        description:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"
        price:
          type: "integer"
          format: "double"

    ProductDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        menuId:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        description:
          $ref: "#/components/schemas/TextModel"
        image:
          type: "string"
        costPrice:
          type: "integer"
          format: "double"

    RestaurantDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "long"
        name:
          $ref: "#/components/schemas/TextModel"
        logo:
          type: "string"
        domain:
          type: "string"


    TextModel:
      type: "object"
      properties:
        uz:
          type: "string"
        ru:
          type: "string"
        eng:
          type: "string"





  
