/*
 * Lamenu documentation Merchant
 * Lamenu documentation Merchant allows to you view the schema of Merchant Lamenu project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AppDto;
import org.openapitools.client.model.BranchDto;
import org.openapitools.client.model.DeliveryDto;
import org.openapitools.client.model.PaymentDto;
import org.openapitools.client.model.PosterDto;
import org.openapitools.client.model.SmsGatewayDto;
import org.openapitools.client.model.TelephonyDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsApi
 */
@Ignore
public class SettingsApiTest {

    private final SettingsApi api = new SettingsApi();

    
    /**
     * 
     *
     * Returns a app by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsAppIdGetTest() throws ApiException {
        Long id = null;
        AppDto response = api.merchantSettingsAppIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a new app
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsAppPostTest() throws ApiException {
        AppDto appDto = null;
        api.merchantSettingsAppPost(appDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a badge by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsBadgeIdGetTest() throws ApiException {
        Long id = null;
        BranchDto response = api.merchantSettingsBadgeIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Create a new B
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsBadgePostTest() throws ApiException {
        BranchDto branchDto = null;
        Integer response = api.merchantSettingsBadgePost(branchDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a delivery by merchant ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsDeliveryIdGetTest() throws ApiException {
        Long id = null;
        DeliveryDto response = api.merchantSettingsDeliveryIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a new delivery
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsDeliveryPostTest() throws ApiException {
        DeliveryDto deliveryDto = null;
        api.merchantSettingsDeliveryPost(deliveryDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a payment by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsPaymentIdGetTest() throws ApiException {
        Long id = null;
        PaymentDto response = api.merchantSettingsPaymentIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a new payment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsPaymentPostTest() throws ApiException {
        PaymentDto paymentDto = null;
        api.merchantSettingsPaymentPost(paymentDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a poster by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsPosterIdGetTest() throws ApiException {
        Long id = null;
        PosterDto response = api.merchantSettingsPosterIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a new poster
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsPosterPostTest() throws ApiException {
        PosterDto posterDto = null;
        api.merchantSettingsPosterPost(posterDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a sms by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsSmsGetwayIdGetTest() throws ApiException {
        Long id = null;
        SmsGatewayDto response = api.merchantSettingsSmsGetwayIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a new sms
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsSmsGetwayPostTest() throws ApiException {
        SmsGatewayDto smsGatewayDto = null;
        api.merchantSettingsSmsGetwayPost(smsGatewayDto);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a telephony by its ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsTelephonyIdGetTest() throws ApiException {
        Long id = null;
        TelephonyDto response = api.merchantSettingsTelephonyIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Adds a new telephony
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantSettingsTelephonyPostTest() throws ApiException {
        TelephonyDto telephonyDto = null;
        api.merchantSettingsTelephonyPost(telephonyDto);

        // TODO: test validations
    }
    
}
